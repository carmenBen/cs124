{"version":3,"sources":["reportWebVitals.js","ChecklistItem.js","Checklist.js","AddTaskPage.js","ModifyTaskPage.js","App.js","InMemoryApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ChecklistItem","props","className","type","onInput","checkFunction","id","name","value","defaultChecked","completed","htmlFor","title","priority","onClick","modifyTask","Checklist","getItemsToRender","items","map","item","e","checked","target","changeCompletedItems","completedItems","filter","handleChangeField","undefined","incompleteTasksOnly","AddTaskPage","cancel","addNewDataPoint","document","getElementById","ModifyTaskPage","defaultValue","taskName","App","useState","sortValue","setSortValue","useCollection","collection","orderBy","data","docs","doc","setIncompleteTasksOnly","initialCompletedItems","setCompletedItems","componentsToRender","setComponentsToRender","taskButtonValue","showButtons","setShowButtons","addNewItem","generateUniqueID","set","created","firebase","database","ServerValue","TIMESTAMP","console","log","returnToHomePage","field","update","useEffect","onChange","length","forEach","delete","InMemoryApp","initialData","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ab9c0a38.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import '../node_modules/font-awesome/css/font-awesome.min.css';\n\nexport function ChecklistItem(props) {\n    const priorities = {\n        \"1\": \"High\",\n        \"2\": \"Medium\",\n        \"3\": \"Low\"\n    }\n\n    return (\n        <div className={\"checklist\"}>\n            <input key={props.id} type=\"checkbox\" onInput={props.checkFunction} id={props.id}\n                   name={props.id} value={props.id} defaultChecked={props.completed}/>\n            {/*<div id={\"checklist-item-margin\"}>*/}\n                <label htmlFor={props.id}>{props.title + \" (\" + priorities[props.priority] + \") \"}</label>\n                <button onClick={() => props.modifyTask(props.title, props.id)}>Modify</button>\n            {/*</div>*/}\n        </div>\n    );\n\n    //\n}","import React from \"react\";\nimport {ChecklistItem} from \"./ChecklistItem\";\n\nexport function Checklist(props) {\n\n    function onCheck(checked, id) {\n        checked ? props.changeCompletedItems([...props.completedItems, id]) :\n            props.changeCompletedItems(props.completedItems.filter((item) => item !== id));\n        props.handleChangeField(id, \"completed\", checked);\n    }\n\n    function getItemsToRender(completed) {\n        return props.items.map((item) => ((completed && item.completed) || (!completed && !item.completed) ?\n            <ChecklistItem key={item.id} id={item.id} title={item.title} completed={item.completed}\n                           checkFunction={(e) => onCheck(e.target.checked, item.id)} modifyTask={props.modifyTask}\n                           priority={item.priority}/>\n            : undefined));\n    }\n\n    return (\n        <form>\n            <table>\n                <thead>\n                    <tr>\n                        {!props.incompleteTasksOnly && <th>Complete</th>}\n                        <th>Incomplete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        {!props.incompleteTasksOnly && <td>{getItemsToRender(true)}</td>}\n                        <td>{getItemsToRender(false)}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </form>\n    );\n}","import React from \"react\";\n\nexport function AddTaskPage(props) {\n\n    return (\n        <div>\n            <label id=\"addTask\" htmlFor=\"newTask\">Add New Task:</label>\n            <input type=\"text\" id=\"newTask\" name=\"newTask\"/>\n            <select name=\"priority\" id=\"priority-dropdown\">\n                <option value=\"1\">High</option>\n                <option value=\"2\">Medium</option>\n                <option value=\"3\">Low</option>\n            </select>\n            <input type=\"button\" value=\"Cancel\"\n                   onClick={() => props.cancel()}/>\n            <input type=\"button\" value=\"Add\"\n                   onClick={(e) => props.addNewDataPoint(document.getElementById(\"newTask\").value,\n                       document.getElementById(\"priority-dropdown\").value)}/>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport function ModifyTaskPage(props) {\n    function onModifyClick() {\n        props.handleChangeField(props.id, \"title\", document.getElementById(\"changeTask\").value);\n        props.handleChangeField(props.id, \"priority\", document.getElementById(\"priority-dropdown\").value);\n    }\n\n    return (\n        <div>\n            <label id=\"modifyTask\" htmlFor=\"changeTask\">Modify Task:</label>\n            <input type=\"text\" id=\"changeTask\" name=\"changeTask\" defaultValue={props.taskName}/>\n            <select name=\"priority\" id=\"priority-dropdown\">\n                <option value=\"1\">High</option>\n                <option value=\"2\">Medium</option>\n                <option value=\"3\">Low</option>\n            </select>\n            <input type=\"button\" value=\"Cancel\"\n                   onClick={() => props.cancel()}/>\n            <input type=\"button\" value=\"Modify\"\n                   onClick={() => onModifyClick()}/>\n        </div>\n    );\n}","import './App.css';\nimport {Checklist} from './Checklist.js'\nimport {AddTaskPage} from \"./AddTaskPage\";\nimport React, {useEffect, useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport {ModifyTaskPage} from \"./ModifyTaskPage\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\n\nexport function App(props) {\n    const [sortValue, setSortValue] = useState(\"title\");\n    const [value, loading, error] = useCollection(props.collection.orderBy(sortValue, \"asc\"));\n    let data = [];\n    if (value !== undefined) {\n        data = value.docs.map(doc =>\n            doc.data());\n    }\n    const [incompleteTasksOnly, setIncompleteTasksOnly] = useState(false);\n    const initialCompletedItems = data.map((item) => item.completed ? item.id : undefined);\n    const [completedItems, setCompletedItems] = useState(initialCompletedItems);\n    const [componentsToRender, setComponentsToRender] = useState(<Checklist items={data}\n                                                                            handleChangeField={handleChangeField}\n                                                                            modifyTask={modifyTask}\n                                                                            completedItems={completedItems}\n                                                                            changeCompletedItems={setCompletedItems}/>);\n\n    const taskButtonValue = (!incompleteTasksOnly ? \"Hide Completed Tasks\" : \"Show Completed Tasks\");\n    const [showButtons, setShowButtons] = useState(true);\n\n    useEffect(() => {\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n                                         completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        setShowButtons(true);\n    }, [value]); // used to be data, but with firebase it's now value, same functionality\n\n    // useEffect(() => {\n    //     setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n    //                                      completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n    //     setShowButtons(true);\n    // }, [completedItems]);\n\n    function addNewItem(value, priority) {\n        const id = generateUniqueID();\n        props.collection.doc(id).set(\n            {\n                title: value,\n                id: id,\n                completed: false,\n                priority: priority,\n                created: firebase.database.ServerValue.TIMESTAMP\n            }\n        );\n        console.log(priority);\n    }\n\n    function returnToHomePage() {\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n                                         completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        setShowButtons(true);\n    }\n\n    function handleChangeField(id, field, value) {\n        props.collection.doc(id).update({\n            [field]: value,\n        });\n    }\n\n    function handleDelete(id) {\n        props.collection.doc(id).delete();\n    }\n\n    function deleteCompletedItems() {\n        data.forEach(item => item.completed && handleDelete(item.id));\n        setCompletedItems([]);\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n                                         completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        setShowButtons(true);\n    }\n\n    function renderAddTaskPage() {\n        console.log(\"trying to render add task page\");\n        setComponentsToRender(<AddTaskPage addNewDataPoint={addNewItem} cancel={returnToHomePage}/>);\n        setShowButtons(!showButtons);\n    }\n\n    function changeItemsToShow() {\n        setIncompleteTasksOnly(!incompleteTasksOnly);\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n                                         completedItems={completedItems}\n                                         changeCompletedItems={setCompletedItems}\n                                         incompleteTasksOnly={incompleteTasksOnly}/>);\n    }\n\n    function modifyTask(taskName, id) {\n        setComponentsToRender(<ModifyTaskPage handleChangeField={handleChangeField} taskName={taskName} id={id}\n                                              cancel={returnToHomePage}/>)\n        setShowButtons(false);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>\n                To Do List <br/>\n                {showButtons &&\n                <div id=\"sort-by\">Sort by:\n                    <select name=\"sortBy\" id=\"sortByDropdown\"\n                            onChange={() => setSortValue(document.getElementById(\"sortByDropdown\").value)}>\n                        <option value=\"title\">Title</option>\n                        <option value=\"priority\">Priority</option>\n                        <option value=\"created\">Date created</option>\n                    </select></div>\n                }\n            </h1>\n\n            {componentsToRender}\n            {showButtons && <div>\n                <input type=\"button\" value=\"Add New Task\" onClick={renderAddTaskPage}/>\n                {completedItems.length > 0 &&\n                <input type=\"button\" value={\"Delete Completed Items\"}\n                       onClick={deleteCompletedItems}/>\n                }\n                <input type=\"button\" value={taskButtonValue}\n                       onClick={changeItemsToShow}/>\n            </div>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"./App\";\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nexport function InMemoryApp(props) {\n    return <App initialData={props.initialData} collection={props.collection} />\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {InMemoryApp} from \"./InMemoryApp\";\nimport firebase from \"firebase/compat\";\n\nconst initialData = []\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCcQ6XCOvMIA7pHME4bWBgy_7OVy_7XErA\",\n    authDomain: \"cs124-fall2021.firebaseapp.com\",\n    projectId: \"cs124-fall2021\",\n    storageBucket: \"cs124-fall2021.appspot.com\",\n    messagingSenderId: \"264318304667\",\n    appId: \"1:264318304667:web:4be8d27a02811b1ccd613e\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst collectionName = \"carmenBen-hmc-tasks\";\nconst collection = db.collection(collectionName);\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp initialData={initialData} collection={collection}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}