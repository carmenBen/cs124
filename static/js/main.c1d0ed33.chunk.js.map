{"version":3,"sources":["reportWebVitals.js","ChecklistItem.js","Checklist.js","AddTaskPage.js","IncompleteTasksOnly.js","ModifyTaskPage.js","App.js","InMemoryApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ChecklistItem","props","inputTag","completed","type","onInput","checkFunction","id","name","value","defaultChecked","className","htmlFor","title","onClick","modifyTask","Checklist","onCheck","e","currentIndex","completedItems","indexOf","handleChangeField","changeCompletedItems","filter","item","completedItemsToRender","items","map","undefined","incompleteItemsToRender","AddTaskPage","onSubmit","addNewDataPoint","document","getElementById","IncompleteTasksOnly","initialCompletedItems","React","useState","setCompletedItems","ModifyTaskPage","defaultValue","taskName","App","initialData","data","setData","itemsToShow","setItemsToShow","componentsToRender","setComponentsToRender","taskButtonValue","showButtons","setShowButtons","preventDefault","newDataMember","generateUniqueID","newData","field","console","log","deleteCompletedItems","renderAddTaskPage","changeItemsToShow","useEffect","length","renderDeleteItemsButton","InMemoryApp","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c1d0ed33.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import '../node_modules/font-awesome/css/font-awesome.min.css';\n\nexport function ChecklistItem(props) {\n    const inputTag = props.completed ?\n        <input key={props.id} type=\"checkbox\" onInput={props.checkFunction} id={props.id}\n               name={props.id} value={props.id} defaultChecked={props.completed}/> :\n        <input key={props.id} type=\"checkbox\" onInput={props.checkFunction} id={props.id}\n               name={props.id} value={props.id} defaultChecked={props.completed}/>;\n\n    return (\n        <div className={\"checklist\"}>\n            {inputTag}\n            <label htmlFor={props.id}>{props.title}</label>\n            <button onClick={() => props.modifyTask(props.title, props.id)}>Modify</button>\n        </div>\n    );\n\n    //\n}","import React from \"react\";\nimport {ChecklistItem} from \"./ChecklistItem\";\n\nexport function Checklist(props) {\n\n\n    function onCheck(e, id) {\n        const currentIndex = props.completedItems.indexOf(id);\n        props.handleChangeField(e, id, \"completed\", !(currentIndex > -1));\n        if (currentIndex > -1) {\n            props.changeCompletedItems(props.completedItems.filter((item) => item !== id))\n        } else {\n            props.changeCompletedItems([...props.completedItems, id]);\n        }\n    }\n\n    const completedItemsToRender = props.items.map((item) => (props.completedItems.indexOf(item.id) > -1) ?\n        <ChecklistItem key={item.id} id={item.id} title={item.title} completed={true}\n                       checkFunction={(e) => onCheck(e, item.id)} modifyTask={props.modifyTask}/> : undefined);\n    const incompleteItemsToRender = props.items.map((item) => (props.completedItems.indexOf(item.id) <= -1) ?\n        <ChecklistItem key={item.id} id={item.id} title={item.title} completed={false}\n                       checkFunction={(e) => onCheck(e, item.id)} modifyTask={props.modifyTask}/> : undefined);\n\n    return (\n        <form>\n            <table>\n                <tr>\n                    <th>Complete</th>\n                    <th>Incomplete</th>\n                </tr>\n                <tr>\n                    <td>{completedItemsToRender}</td>\n                    <td>{incompleteItemsToRender}</td>\n                </tr>\n            </table>\n        </form>\n    );\n}","import React from \"react\";\n\nexport function AddTaskPage(props) {\n\n    return (\n        <form onSubmit={(e) => props.addNewDataPoint(e, document.getElementById(\"newTask\").value)}>\n            <label id=\"addTask\" htmlFor=\"newTask\">Add New Task:</label>\n            <input type=\"text\" id=\"newTask\" name=\"newTask\" />\n            <input type=\"submit\" value=\"Add\" />\n        </form>\n    );\n}\n","import React from \"react\";\nimport {ChecklistItem} from \"./ChecklistItem\";\n\nexport function IncompleteTasksOnly(props) {\n    const initialCompletedItems = props.items.map((item) => item.completed ? item.id : undefined);\n    let [completedItems, setCompletedItems] = React.useState(initialCompletedItems);\n\n    function onCheck(id) {\n        const currentIndex = completedItems.indexOf(id);\n        if (currentIndex > -1) {\n            completedItems = completedItems.filter(item => item !== id);\n            setCompletedItems(completedItems);\n        } else {\n            completedItems = [...completedItems, id];\n            setCompletedItems(completedItems);\n        }\n    }\n\n    const incompleteItemsToRender = props.items.map((item) => (completedItems.indexOf(item.id) <= -1) ?\n        <ChecklistItem id={item.id} title={item.title} completed={false}\n                       checkFunction={() => onCheck(item.id)}/> : undefined);\n\n    return (\n        <form>\n            <table>\n                <tr>\n                    <th>Incomplete</th>\n                </tr>\n                <tr>\n                    <td>{incompleteItemsToRender}</td>\n                </tr>\n            </table>\n        </form>\n    );\n}","export function ModifyTaskPage(props) {\n    return (\n        <form onSubmit={(e) => props.handleChangeField(e, props.id, \"title\", document.getElementById(\"changeTask\").value)}>\n            <label id=\"modifyTask\" htmlFor=\"changeTask\">Modify Task:</label>\n            <input type=\"text\" id=\"changeTask\" name=\"changeTask\" defaultValue={props.taskName} />\n            <input type=\"submit\" value=\"Modify\" />\n        </form>\n    );\n}","import './App.css';\nimport {Checklist} from './Checklist.js'\nimport {AddTaskPage} from \"./AddTaskPage\";\nimport {useEffect, useState} from \"react\";\nimport {IncompleteTasksOnly} from \"./IncompleteTasksOnly\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport {ModifyTaskPage} from \"./ModifyTaskPage\";\n\nexport function App(props) {\n\n    let [data, setData] = useState(props.initialData);\n    let [itemsToShow, setItemsToShow] = useState(\"both\");\n    const initialCompletedItems = data.map((item) => item.completed ? item.id : undefined);\n    let [completedItems, setCompletedItems] = useState(initialCompletedItems);\n    let [componentsToRender, setComponentsToRender] = useState(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask} completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n\n    let taskButtonValue = (itemsToShow === \"both\" ? \"Hide Completed Tasks\" : \"Show Completed Tasks\");\n    let [showButtons, setShowButtons] = useState(true);\n\n    useEffect(() => {\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask} completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        setShowButtons(true);\n    }, [data]);\n\n    useEffect(() => {\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask} completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        setShowButtons(true);\n    }, [completedItems]);\n\n    function addNewDataPoint(e, value) {\n        e.preventDefault();\n        let newDataMember = {\n            title: value,\n            id: generateUniqueID(),\n            completed: false,\n        }\n        let newData = [...data, newDataMember];\n        setData(newData);\n    }\n\n    function handleChangeField(e, id, field, value) {\n        e.preventDefault();\n        console.log(\"handling chang efield\");\n        console.log(id, value);\n        console.log(data);\n        let newData = data.map(item => id === item.id ? {...item, [field]: value} : item);\n        setData(newData);\n        console.log(data);\n    }\n\n    function renderAddTaskButton() {\n        return (\n            <input type=\"button\" value=\"Add New Task\" onClick={renderAddTaskPage}/>);\n    }\n\n    function renderChangeItemsButton() {\n        return (\n            <input type=\"button\" value={taskButtonValue}\n                   onClick={changeItemsToShow}/>);\n    }\n\n    function deleteCompletedItems() {\n        console.log(completedItems);\n        setData(data.filter(item => !(item.completed)));\n        setCompletedItems([]);\n        console.log(completedItems);\n    }\n\n    function renderDeleteItemsButton() {\n        if (completedItems.length > 0) {\n            return (\n                <input type=\"button\" value={\"Delete Completed Items\"}\n                       onClick={deleteCompletedItems}/>\n            );\n        }\n    }\n\n    function renderAddTaskPage() {\n        setComponentsToRender(<AddTaskPage addNewDataPoint={addNewDataPoint}/>);\n        setShowButtons(!showButtons);\n    }\n\n    function changeItemsToShow() {\n        setItemsToShow((itemsToShow === \"incomplete\" ? \"both\" : \"incomplete\"));\n        if (itemsToShow === \"both\") {\n            setComponentsToRender(<IncompleteTasksOnly items={data} />);\n        } else {\n            setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask} completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        }\n    }\n\n    function modifyTask(taskName, id) {\n        setComponentsToRender(<ModifyTaskPage handleChangeField={handleChangeField} taskName={taskName} id={id}/>)\n        setShowButtons(false);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>To Do List</h1>\n            {componentsToRender}\n            {showButtons ? renderAddTaskButton() : undefined}\n            {showButtons ? renderChangeItemsButton() : undefined}\n            {showButtons ? renderDeleteItemsButton() : undefined}\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"./App\";\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nexport function InMemoryApp(props) {\n    return <App initialData={props.initialData} />\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {InMemoryApp} from \"./InMemoryApp\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nconst initialData = []\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}