{"version":3,"sources":["reportWebVitals.js","ChecklistItem.js","Checklist.js","AddTaskPage.js","IncompleteTasksOnly.js","ModifyTaskPage.js","App.js","InMemoryApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ChecklistItem","props","className","type","onInput","checkFunction","id","name","value","defaultChecked","completed","htmlFor","title","priority","onClick","modifyTask","Checklist","onCheck","e","target","checked","changeCompletedItems","completedItems","filter","item","handleChangeField","completedItemsToRender","items","map","undefined","incompleteItemsToRender","AddTaskPage","cancel","addNewDataPoint","document","getElementById","IncompleteTasksOnly","indexOf","ModifyTaskPage","defaultValue","taskName","App","useState","sortValue","setSortValue","useCollection","collection","orderBy","data","docs","doc","itemsToShow","setItemsToShow","initialCompletedItems","setCompletedItems","componentsToRender","setComponentsToRender","taskButtonValue","showButtons","setShowButtons","addNewItem","generateUniqueID","set","created","firebase","database","ServerValue","TIMESTAMP","console","log","returnToHomePage","field","update","useEffect","onChange","length","forEach","delete","InMemoryApp","initialData","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c87d029f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import '../node_modules/font-awesome/css/font-awesome.min.css';\n\nexport function ChecklistItem(props) {\n    const priorities = {\n        \"1\": \"High\",\n        \"2\": \"Medium\",\n        \"3\": \"Low\"\n    }\n\n    return (\n        <div className={\"checklist\"}>\n            <input key={props.id} type=\"checkbox\" onInput={props.checkFunction} id={props.id}\n                   name={props.id} value={props.id} defaultChecked={props.completed}/>\n            <label htmlFor={props.id}>{props.title + \" (\" + priorities[props.priority] + \") \"}</label>\n            <button onClick={() => props.modifyTask(props.title, props.id)}>Modify</button>\n        </div>\n    );\n\n    //\n}","import React from \"react\";\nimport {ChecklistItem} from \"./ChecklistItem\";\n\nexport function Checklist(props) {\n\n    function onCheck(e, id) {\n        e.target.checked ? props.changeCompletedItems([...props.completedItems, id]) :\n            props.changeCompletedItems(props.completedItems.filter((item) => item !== id));\n        props.handleChangeField(id, \"completed\", e.target.checked);\n    }\n\n    const completedItemsToRender = props.items.map((item) => (item.completed ?\n        <ChecklistItem key={item.id} id={item.id} title={item.title} completed={true}\n                       checkFunction={(e) => onCheck(e, item.id)} modifyTask={props.modifyTask} priority={item.priority}/> : undefined));\n    const incompleteItemsToRender = props.items.map((item) => (!(item.completed) ?\n        <ChecklistItem key={item.id} id={item.id} title={item.title} completed={false}\n                       checkFunction={(e) => onCheck(e, item.id)} modifyTask={props.modifyTask} priority={item.priority}/> : undefined));\n\n    return (\n        <form>\n            <table>\n                <tr>\n                    <th>Complete</th>\n                    <th>Incomplete</th>\n                </tr>\n                <tr>\n                    <td>{completedItemsToRender}</td>\n                    <td>{incompleteItemsToRender}</td>\n                </tr>\n            </table>\n        </form>\n    );\n}","import React from \"react\";\n\nexport function AddTaskPage(props) {\n\n    return (\n        <div>\n            <label id=\"addTask\" htmlFor=\"newTask\">Add New Task:</label>\n            <input type=\"text\" id=\"newTask\" name=\"newTask\"/>\n            <select name=\"priority\" id=\"priority-dropdown\">\n                <option value=\"1\">High</option>\n                <option value=\"2\">Medium</option>\n                <option value=\"3\">Low</option>\n            </select>\n            <input type=\"button\" value=\"Cancel\"\n                   onClick={() => props.cancel()}/>\n            <input type=\"button\" value=\"Add\"\n                   onClick={() => props.addNewDataPoint(document.getElementById(\"newTask\").value,\n                       document.getElementById(\"priority-dropdown\").value)}/>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {ChecklistItem} from \"./ChecklistItem\";\n\nexport function IncompleteTasksOnly(props) {\n    function onCheck(e, id) {\n        e.target.checked ? props.changeCompletedItems([...props.completedItems, id]) :\n            props.changeCompletedItems(props.completedItems.filter((item) => item !== id));\n        props.handleChangeField(id, \"completed\", e.target.checked);\n    }\n\n    const incompleteItemsToRender = props.items.map((item) => (props.completedItems.indexOf(item.id) <= -1) ?\n        <ChecklistItem id={item.id} title={item.title} completed={false}\n                       checkFunction={(e) => onCheck(e, item.id)}/> : undefined);\n\n    return (\n        <form>\n            <table>\n                <tr>\n                    <th>Incomplete</th>\n                </tr>\n                <tr>\n                    <td>{incompleteItemsToRender}</td>\n                </tr>\n            </table>\n        </form>\n    );\n}","import React from \"react\";\n\nexport function ModifyTaskPage(props) {\n    function onModifyClick() {\n        props.handleChangeField(props.id, \"title\", document.getElementById(\"changeTask\").value);\n        props.handleChangeField(props.id, \"priority\", document.getElementById(\"priority-dropdown\").value);\n    }\n\n    return (\n        <div>\n            <label id=\"modifyTask\" htmlFor=\"changeTask\">Modify Task:</label>\n            <input type=\"text\" id=\"changeTask\" name=\"changeTask\" defaultValue={props.taskName}/>\n            <select name=\"priority\" id=\"priority-dropdown\">\n                <option value=\"1\">High</option>\n                <option value=\"2\">Medium</option>\n                <option value=\"3\">Low</option>\n            </select>\n            <input type=\"button\" value=\"Cancel\"\n                   onClick={() => props.cancel()}/>\n            <input type=\"button\" value=\"Modify\"\n                   onClick={() => onModifyClick()}/>\n        </div>\n    );\n}","import './App.css';\nimport {Checklist} from './Checklist.js'\nimport {AddTaskPage} from \"./AddTaskPage\";\nimport React, {useEffect, useState} from \"react\";\nimport {IncompleteTasksOnly} from \"./IncompleteTasksOnly\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport {ModifyTaskPage} from \"./ModifyTaskPage\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\n\nexport function App(props) {\n    const [sortValue, setSortValue] = useState(\"title\");\n    const [value, loading, error] = useCollection(props.collection.orderBy(sortValue, \"asc\"));\n    let data = [];\n    if (value !== undefined) {\n        data = value.docs.map(doc =>\n            doc.data());\n    }\n    const [itemsToShow, setItemsToShow] = useState(\"both\");\n    const initialCompletedItems = data.map((item) => item.completed ? item.id : undefined);\n    const [completedItems, setCompletedItems] = useState(initialCompletedItems);\n    const [componentsToRender, setComponentsToRender] = useState(<Checklist items={data}\n                                                                            handleChangeField={handleChangeField}\n                                                                            modifyTask={modifyTask}\n                                                                            completedItems={completedItems}\n                                                                            changeCompletedItems={setCompletedItems}/>);\n\n    const taskButtonValue = (itemsToShow === \"both\" ? \"Hide Completed Tasks\" : \"Show Completed Tasks\");\n    const [showButtons, setShowButtons] = useState(true);\n\n    useEffect(() => {\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n                                         completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        setShowButtons(true);\n    }, [value]);\n\n    useEffect(() => {\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n                                         completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        setShowButtons(true);\n    }, [completedItems]);\n\n    function addNewItem(value, priority) {\n        const id = generateUniqueID();\n        props.collection.doc(id).set(\n            {\n                title: value,\n                id: id,\n                completed: false,\n                priority: priority,\n                created: firebase.database.ServerValue.TIMESTAMP\n            }\n        );\n        console.log(priority);\n    }\n\n    function returnToHomePage() {\n        setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n                                         completedItems={completedItems} changeCompletedItems={setCompletedItems}/>);\n        setShowButtons(true);\n    }\n\n    function handleChangeField(id, field, value) {\n        props.collection.doc(id).update({\n            [field]: value,\n        });\n    }\n\n    function handleDelete(id) {\n        props.collection.doc(id).delete();\n    }\n\n    function deleteCompletedItems() {\n        data.forEach(item => item.completed && handleDelete(item.id));\n        setCompletedItems([]);\n    }\n\n    function renderAddTaskPage() {\n        console.log(\"trying to render add task page\");\n        setComponentsToRender(<AddTaskPage addNewDataPoint={addNewItem} cancel={returnToHomePage}/>);\n        setShowButtons(!showButtons);\n    }\n\n    function changeItemsToShow() {\n        setItemsToShow((itemsToShow === \"incomplete\" ? \"both\" : \"incomplete\"));\n        if (itemsToShow === \"both\") {\n            setComponentsToRender(<IncompleteTasksOnly completedItems={completedItems}\n                                                       changeCompletedItems={setCompletedItems}\n                                                       handleChangeField={handleChangeField} items={data}/>);\n        } else {\n            setComponentsToRender(<Checklist items={data} handleChangeField={handleChangeField} modifyTask={modifyTask}\n                                             completedItems={completedItems}\n                                             changeCompletedItems={setCompletedItems}/>);\n        }\n    }\n\n    function modifyTask(taskName, id) {\n        setComponentsToRender(<ModifyTaskPage handleChangeField={handleChangeField} taskName={taskName} id={id} cancel={returnToHomePage}/>)\n        setShowButtons(false);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>\n                To Do List <br/>\n                {showButtons &&\n                <div id=\"sort-by\">Sort by:\n                <select name=\"sortBy\" id=\"sortByDropdown\"\n                        onChange={() => setSortValue(document.getElementById(\"sortByDropdown\").value)}>\n                    <option value=\"title\">Title</option>\n                    <option value=\"priority\">Priority</option>\n                    <option value=\"created\">Date created</option>\n                </select></div>\n                }\n            </h1>\n\n            {componentsToRender}\n            {showButtons && <div>\n                <input type=\"button\" value=\"Add New Task\" onClick={renderAddTaskPage}/>\n                {completedItems.length > 0 &&\n                <input type=\"button\" value={\"Delete Completed Items\"}\n                       onClick={deleteCompletedItems}/>\n                }\n                <input type=\"button\" value={taskButtonValue}\n                       onClick={changeItemsToShow}/>\n            </div>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"./App\";\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nexport function InMemoryApp(props) {\n    return <App initialData={props.initialData} collection={props.collection} />\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {InMemoryApp} from \"./InMemoryApp\";\nimport firebase from \"firebase/compat\";\n\nconst initialData = []\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCcQ6XCOvMIA7pHME4bWBgy_7OVy_7XErA\",\n    authDomain: \"cs124-fall2021.firebaseapp.com\",\n    projectId: \"cs124-fall2021\",\n    storageBucket: \"cs124-fall2021.appspot.com\",\n    messagingSenderId: \"264318304667\",\n    appId: \"1:264318304667:web:4be8d27a02811b1ccd613e\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst collectionName = \"carmenBen-hmc-tasks\";\nconst collection = db.collection(collectionName);\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp initialData={initialData} collection={collection}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}