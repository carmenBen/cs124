{"version":3,"sources":["reportWebVitals.js","ChecklistItem.js","Checklist.js","AddTaskPage.js","ModifyTaskPage.js","AddNewListPage.js","ConfirmDeletePage.js","App.js","InMemoryApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ChecklistItem","props","className","type","onInput","checkFunction","id","name","value","defaultChecked","completed","htmlFor","title","priority","onClick","modifyTask","Checklist","getItemsToRender","items","map","item","e","checked","target","handleChangeField","undefined","incompleteTasksOnly","AddTaskPage","React","useState","setTitle","setPriority","onChange","cancel","addNewDataPoint","ModifyTaskPage","taskName","defaultValue","AddNewListPage","addNewList","ConfirmDeletePage","listName","deleteCurrentList","listId","App","sortValue","setSortValue","useCollection","collection","listValue","loading","lists","console","log","docs","doc","data","currentList","setCurrentList","orderBy","taskValue","setIncompleteTasksOnly","currentPage","setCurrentPage","currentTaskNameId","setCurrentTaskNameId","taskButtonValue","returnToHomePage","field","update","filter","list","selected","delete","completedItems","task","length","forEach","generateUniqueID","set","created","firebase","database","ServerValue","TIMESTAMP","InMemoryApp","initialData","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8687f74.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import '../node_modules/font-awesome/css/font-awesome.min.css';\n\nexport function ChecklistItem(props) {\n    const priorities = {\n        \"1\": \"High\",\n        \"2\": \"Medium\",\n        \"3\": \"Low\"\n    }\n\n    return (\n        <div className={\"checklist\"}>\n            <input key={props.id} type=\"checkbox\" onInput={props.checkFunction}\n                   id={props.id}\n                   name={props.id} value={props.id} defaultChecked={props.completed}/>\n            <label htmlFor={props.id}>{props.title + \" (\" + priorities[props.priority] + \") \"}</label>\n            <button onClick={() => props.modifyTask(props.title, props.id)}>Modify</button>\n        </div>\n    );\n\n    //\n}","import React from \"react\";\nimport {ChecklistItem} from \"./ChecklistItem\";\n\nexport function Checklist(props) {\n\n    function onCheck(checked, id) {\n        props.handleChangeField(id, \"completed\", checked);\n    }\n\n    function getItemsToRender(completed) {\n        return props.items.map((item) => ((completed && item.completed) || (!completed && !item.completed) ?\n            <ChecklistItem key={item.id} id={item.id} title={item.title} completed={item.completed}\n                           checkFunction={(e) => onCheck(e.target.checked, item.id)} modifyTask={props.modifyTask}\n                           priority={item.priority}/>\n            : undefined));\n    }\n\n    return (\n        <form>\n            <table>\n                <thead>\n                    <tr>\n                        {!props.incompleteTasksOnly && <th>Complete</th>}\n                        <th>Incomplete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        {!props.incompleteTasksOnly && <td>{getItemsToRender(true)}</td>}\n                        <td>{getItemsToRender(false)}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </form>\n    );\n}","import React from \"react\";\n\nexport function AddTaskPage(props) {\n    const [title, setTitle] = React.useState(\"\");\n    const [priority, setPriority] = React.useState(\"1\");\n\n    return (\n        <div>\n            <label id=\"addTask\" htmlFor=\"newTask\">Add New Task:</label>\n            <input type=\"text\" id=\"newTask\" name=\"newTask\" onChange={(e) => setTitle(e.target.value)}/>\n            <select name=\"priority\" id=\"priority-dropdown\" aria-label=\"dropdown to select priority\" onChange={(e) => setPriority(e.target.value)}>\n                <option value=\"1\">High</option>\n                <option value=\"2\">Medium</option>\n                <option value=\"3\">Low</option>\n            </select>\n            <input type=\"button\" value=\"Cancel\"\n                   onClick={() => props.cancel()}/>\n            <input type=\"button\" value=\"Add\"\n                   onClick={(e) => props.addNewDataPoint(title, priority)}/>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport function ModifyTaskPage(props) {\n    const [title, setTitle] = React.useState(props.taskName);\n    const [priority, setPriority] = React.useState(props.priority);\n\n    function onModifyClick() {\n        if (props.taskName !== title) {\n            props.handleChangeField(props.id, \"title\", title);\n        }\n        if (props.priority !== priority) {\n            props.handleChangeField(props.id, \"priority\", priority);\n        }\n    }\n\n    return (\n        <div>\n            <label id=\"modifyTask\" htmlFor=\"changeTask\">Modify Task:</label>\n            <input type=\"text\" id=\"changeTask\" name=\"changeTask\" defaultValue={props.taskName} onChange={(e) => setTitle(e.target.value)}/>\n            <select name=\"priority\" id=\"priority-dropdown\" aria-label=\"dropdown to select priority\" onChange={(e) => setPriority(e.target.value)}>\n                <option value=\"1\">High</option>\n                <option value=\"2\">Medium</option>\n                <option value=\"3\">Low</option>\n            </select>\n            <input type=\"button\" value=\"Cancel\"\n                   onClick={() => props.cancel()}/>\n            <input type=\"button\" value=\"Modify\"\n                   onClick={() => onModifyClick()}/>\n        </div>\n    );\n}","import React from \"react\";\n\nexport function AddNewListPage(props) {\n    const [title, setTitle] = React.useState(\"\");\n\n    return (\n        <div>\n            <label id=\"addList\" htmlFor=\"newList\">Add New List:</label>\n            <input type=\"text\" id=\"newList\" name=\"newList\"\n                   onChange={(e) => setTitle(e.target.value)}/>\n            <input type=\"button\" value=\"Cancel\"\n                   onClick={() => props.cancel()}/>\n            <input type=\"button\" value=\"Add\"\n                   onClick={(e) => props.addNewList(title)}/>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport function ConfirmDeletePage(props) {\n\n    return (\n        <div>\n            <h1 id=\"deleteList\">Are you sure you want to delete {props.listName}?</h1>\n            <input type=\"button\" value=\"Cancel\"\n                   onClick={() => props.cancel()}/>\n            <input type=\"button\" value=\"Confirm\"\n                   onClick={() => props.deleteCurrentList(props.listId)}/>\n        </div>\n    );\n}\n","import './App.css';\nimport {Checklist} from './Checklist.js'\nimport {AddTaskPage} from \"./AddTaskPage\";\nimport React, {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport {ModifyTaskPage} from \"./ModifyTaskPage\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport firebase from \"firebase/compat\";\nimport {AddNewListPage} from \"./AddNewListPage\";\nimport {ConfirmDeletePage} from \"./ConfirmDeletePage\";\n\nexport function App(props) {\n\n    const [sortValue, setSortValue] = useState(\"title\");\n    const [listValue, loading, error] = useCollection(props.collection);\n    let lists = [\n        // {\n        //     title: \"other list\",\n        //     id: \"v1-1636655036490-9127893358184\"\n        // }\n        {\n            title: \"To Do\",\n            id: \"v1-1636654768436-2119059561616\"\n        }\n    ];\n    if (listValue !== undefined) {\n        console.log(\"reading in lists\");\n        lists = listValue.docs.map(doc =>\n            doc.data());\n    }\n    const [currentList, setCurrentList] = useState(lists[0].id);\n    const [taskValue, taskLoading, taskError] = useCollection(props.collection.doc(currentList).collection(\"tasks\").orderBy(sortValue, \"asc\"));\n    let data = [];\n    if (taskValue !== undefined) {\n        data = taskValue.docs.map(doc =>\n            doc.data());\n    }\n\n    const [incompleteTasksOnly, setIncompleteTasksOnly] = useState(false);\n    const [currentPage, setCurrentPage] = useState(\"checklist\");\n    const [currentTaskNameId, setCurrentTaskNameId] = useState([]);\n    const taskButtonValue = (!incompleteTasksOnly ? \"Hide Completed Tasks\" : \"Show Completed Tasks\");\n\n    function addNewItem(value, priority) {\n        const id = generateUniqueID();\n        props.collection.doc(currentList).collection(\"tasks\").doc(id).set(\n            {\n                title: value,\n                id: id,\n                completed: false,\n                priority: priority,\n                created: firebase.database.ServerValue.TIMESTAMP,\n                list: currentList\n            }\n        );\n        setCurrentPage(\"checklist\");\n    }\n\n    function returnToHomePage() {\n        setCurrentPage(\"checklist\");\n    }\n\n    function handleChangeField(id, field, value) {\n        props.collection.doc(currentList).collection(\"tasks\").doc(id).update({\n            [field]: value,\n        });\n        setCurrentPage(\"checklist\");\n    }\n\n    function handleDelete(id) {\n        props.collection.doc(currentList).collection(\"tasks\").doc(id).delete();\n        setCurrentPage(\"checklist\");\n    }\n\n    function deleteCompletedItems() {\n        data.forEach(item => item.completed && handleDelete(item.id));\n        setCurrentPage(\"checklist\");\n    }\n\n    function renderAddTaskPage() {\n        setCurrentPage(\"addTask\");\n    }\n\n    function changeItemsToShow() {\n        setIncompleteTasksOnly(!incompleteTasksOnly);\n        setCurrentPage(\"checklist\");\n    }\n\n    function modifyTask(taskName, id) {\n        setCurrentPage(\"modifyTask\");\n        setCurrentTaskNameId([taskName, id]);\n    }\n\n    function renderAddNewListPage() {\n        setCurrentPage(\"newList\");\n    }\n\n    function addNewList(title) {\n        const id = generateUniqueID();\n        props.collection.doc(id).set(\n            {\n                title: title,\n                id: id,\n            }\n        );\n        console.log(\"added new list\");\n        setCurrentList(lists[0].id);\n        setCurrentPage(\"checklist\");\n    }\n\n    function deleteCurrentList(id) {\n        props.collection.doc(id).delete();\n        console.log(\"id: \", id);\n        setCurrentList(lists[0].id);\n        setCurrentPage(\"checklist\");\n    }\n\n    function renderDeletePage() {\n        setCurrentPage(\"deleteList\");\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>\n                {/*{console.log(\"current list: \", currentList)}*/}\n                {/*{console.log(\"lists: \", lists)}*/}\n                {/*{console.log(\"loading: \", loading)}*/}\n                {!loading && lists.filter(list => list.id === currentList)[0].title}\n                {/*//<br/>*/}\n                {currentPage === \"checklist\" &&\n                <div className=\"selectDropdowns\">\n                    <div id=\"sort-by\">Sort by:\n                        <select name=\"sortBy\" id=\"sortByDropdown\" aria-label=\"dropdown to select value to sort by\"\n                                onChange={(e) => setSortValue(e.target.value)}\n                                defaultValue={sortValue}>\n                            <option value=\"title\" selected={sortValue === \"title\"}>Title</option>\n                            <option value=\"priority\" selected={sortValue === \"priority\"}>Priority</option>\n                            <option value=\"created\" selected={sortValue === \"created\"}>Date created</option>\n                        </select></div>\n                    <div id=\"sort-by\">Select a list:\n                        <select name=\"listSelector\" aria-label=\"dropdown to select list\" id=\"listSelectorDropdown\"\n                                onChange={(e) => setCurrentList(e.target.value)}>\n                            {lists.map(item => <option value={item.id}\n                                                       selected={item.id === currentList}>{item.title}</option>)}\n                        </select>\n                        <button id=\"addButton\" aria-label=\"Add new list\" onClick={() => renderAddNewListPage()}>\n                            +\n                        </button>\n                        {currentList !== \"v1-1636654768436-2119059561616\" &&\n                        <button id=\"deleteButton\" value=\"Delete Current List\" aria-label=\"Delete list\" onClick={() => renderDeletePage()}>\n                            <i className=\"fa fa-trash\" aria-hidden=\"true\"/>\n                        </button>}\n                    </div>\n                </div>\n                }\n            </h1>\n\n            {currentPage === \"deleteList\" &&\n            <ConfirmDeletePage listName={lists.filter(list => list.id === currentList)[0].title} listId={currentList} deleteCurrentList={deleteCurrentList} cancel={returnToHomePage}/>}\n\n            {currentPage === \"checklist\" &&\n            <div>\n                <Checklist items={data}\n                           handleChangeField={handleChangeField}\n                           modifyTask={modifyTask}\n                           completedItems={data.filter((task) => task.completed)}\n                           incompleteTasksOnly={incompleteTasksOnly}\n                />\n                <div className=\"buttons\">\n                    <input type=\"button\" value=\"Add New Task\" onClick={renderAddTaskPage}/>\n                    <input type=\"button\" value={taskButtonValue}\n                           onClick={changeItemsToShow}/>\n                    {(data.filter((task) => task.completed)).length > 0 &&\n                    <input type=\"button\" value={\"Delete Completed Tasks\"}\n                           onClick={deleteCompletedItems}/>\n                    }\n                </div>\n            </div>}\n            {currentPage === \"modifyTask\" && <ModifyTaskPage handleChangeField={handleChangeField}\n                                                             taskName={currentTaskNameId[0]} id={currentTaskNameId[1]}\n                                                             cancel={returnToHomePage}/>}\n            {currentPage === \"addTask\" && <AddTaskPage addNewDataPoint={addNewItem} cancel={returnToHomePage}/>}\n            {currentPage === \"newList\" && <AddNewListPage addNewList={addNewList} cancel={returnToHomePage}/>}\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"./App\";\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nexport function InMemoryApp(props) {\n    return <App initialData={props.initialData} collection={props.collection} />\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {InMemoryApp} from \"./InMemoryApp\";\nimport firebase from \"firebase/compat\";\n\nconst initialData = []\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n    projectId: \"hmc-cs124-fa21-labs\",\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n    messagingSenderId: \"949410042946\",\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst collectionName = \"carmenBen-hmc-tasks\";\nconst collection = db.collection(collectionName);\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp initialData={initialData} collection={collection}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}